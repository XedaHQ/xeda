# Auto-generated by Xeda

create_project -part {{settings.fpga.part}} -force -verbose {{design.name}}

# These settings are set by Xeda
set design_name           {{design.name}}
set vhdl_std              {{design.language.vhdl.standard}}

{% include 'util.tcl' %}

set_param general.maxThreads {{settings.nthreads}}

set reports_dir           {{settings.reports_dir}}
file mkdir ${reports_dir}
file mkdir [file join ${reports_dir} post_route]

puts "\n================================( Read Design Files and Constraints )================================"

{% for src in design.rtl.sources %}
{%- if src.type == 'verilog' %}
{%- if src.variant == 'systemverilog' %}
puts "Reading SystemVerilog file {{src.file}}"
if { [catch {eval read_verilog -sv {{src.file}} } myError]} {
    errorExit $myError
}
{% else %}
puts "Reading Verilog file {{src.file}}"
if { [catch {eval read_verilog {{src.file}} } myError]} {
    errorExit $myError
}
{%- endif %}
{%- endif %}
{% if src.type == 'vhdl' %}
puts "Reading VHDL file {{src.file}}"
if { [catch {eval read_vhdl {% if design.language.vhdl.standard == "08" %} -vhdl2008 {%- endif %} {{src.file}} } myError]} {
    errorExit $myError
}
{%- endif %}
{%- endfor %}

# TODO: Skip saving some artifects in case timing not met or synthesis failed for any reason

{% for xdc_file in xdc_files %}
read_xdc {{xdc_file}}
{% endfor %}

set_property top {{design.rtl.top}} [get_fileset sources_1]

set avail_synth_strategies [join [list_property_value strategy [get_runs synth_1] ] " "]
puts "available synthesis strategies: $avail_synth_strategies"

{% if settings.synth.strategy %}
puts "setting synthesis strategy to {{settings.synth.strategy}}"
set_property strategy {{settings.synth.strategy}} [get_runs synth_1]
{% endif %}


set avail_impl_strategies [join [list_property_value strategy [get_runs impl_1] ] " "]
puts "available implementation strategies: $avail_impl_strategies"

{% if settings.impl.strategy -%}
puts "setting implementation strategy to {{settings.impl.strategy}}"
set_property strategy {{settings.impl.strategy}} [get_runs impl_1]
{% endif -%}

{% for step,options in settings.synth.steps.items() -%}
{% for name,value in options.items() -%}
set_property STEPS.{{step}}.{{name}} {{value}} [get_runs synth_1]
{% endfor -%}
{% endfor -%}

{% for step,options in settings.impl.steps.items() -%}
{% for name,value in options.items() -%}
set_property STEPS.{{step}}.{{name}} {{value}} [get_runs impl_1]
{% endfor -%}
{% endfor -%}

add_files -fileset utils_1 -norecurse [pwd]/{{reports_tcl}}
set_property STEPS.ROUTE_DESIGN.TCL.POST [pwd]/{{reports_tcl}} [get_runs impl_1]

puts "\n================================( Running Synthesis )================================="
launch_runs synth_1 -jobs {{settings.nthreads}}
wait_on_run synth_1

puts "\n================================( Running Implementation )================================="
launch_runs impl_1 -jobs {{settings.nthreads}} -to_step route_design
wait_on_run impl_1
