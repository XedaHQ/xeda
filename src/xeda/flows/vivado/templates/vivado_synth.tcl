# This script was generated by Xeda
create_project -part {{settings.fpga.part}} -force -verbose {{design.name}}

set design_name           {{design.name}}

{%- if settings.nthreads is not none %}
set_param general.maxThreads {{settings.nthreads}}
{%- endif %}
{%- for msg in settings.suppress_msgs %}
set_msg_config -id "\[{{msg}}\]" -suppress
{%- endfor %}

puts "\n=====================( Read Design Files and Constraints )====================="
{%- for src in design.rtl.sources %}
{%- if src.type.name == "Verilog" %}
puts "Reading Verilog file {{src.file}}"
if { [catch {read_verilog "{{src.file}}"} myError]} {
  errorExit $myError
}
{%- elif src.type.name == "SystemVerilog" %}
puts "Reading SystemVerilog file {{src.file}}"
if { [catch {read_verilog -sv "{{src.file}}"} myError]} {
  errorExit $myError
}
{%- elif src.type.name == "Vhdl" %}
puts "Reading VHDL file {{src.file}}"
if { [catch {read_vhdl {% if design.language.vhdl.standard in ("08", "2008") -%} -vhdl2008 {% endif -%} "{{src.file}}"} myError]} {
  errorExit $myError
}
{%- endif %}
{%- endfor %}

{%- for xdc_file in xdc_files %}
read_xdc {{xdc_file}}
{%- endfor %}

set_property top {{design.rtl.top}} [get_fileset sources_1]

set avail_synth_strategies [join [list_property_value strategy [get_runs synth_1] ] " "]
puts "\n Available synthesis strategies:\n  $avail_synth_strategies\n"

{%- if settings.synth.strategy %}
puts "Using {{settings.synth.strategy}} strategy for synthesis."
set_property strategy {{settings.synth.strategy}} [get_runs synth_1]
{%- endif %}

set avail_impl_strategies [join [list_property_value strategy [get_runs impl_1] ] " "]
puts "\n Available implementation strategies:\n  $avail_impl_strategies\n"

{%- if settings.impl.strategy %}
puts "Using {{settings.impl.strategy}} strategy for implementation."
set_property strategy {{settings.impl.strategy}} [get_runs impl_1]
{%- endif %}

{%- if generics %}
set_property generic {% raw -%} { {%- endraw -%} {{generics}} {%- raw -%} } {%- endraw %} [current_fileset]
{%- endif %}

{# see https://www.xilinx.com/support/documentation/sw_manuals/xilinx2022_1/ug912-vivado-properties.pdf #}
{# and https://www.xilinx.com/support/documentation/sw_manuals/xilinx2022_1/ug835-vivado-tcl-commands.pdf #}
{%- for step,options in settings.synth.steps.items() %}
{%- for name,value in options.items() %}
{% if value is mapping %}
{%- for k,v in value.items() %}
set_property STEPS.{{step}}.{{name}}.{{k}} {{v}} [get_runs synth_1]
{%- endfor %}
{%- else %}
set_property STEPS.{{step}}.{{name}} {{value}} [get_runs synth_1]
{%- endif %}
{%- endfor %}
{%- endfor %}

{%- for step,options in settings.impl.steps.items() %}
{%- for name,value in options.items() %}
{% if value is mapping %}
{%- for k,v in value.items() %}
set_property STEPS.{{step}}.{{name}}.{{k}} {{v}} [get_runs impl_1]
{%- endfor %}
{%- else %}
set_property STEPS.{{step}}.{{name}} {{value}} [get_runs impl_1]
{%- endif %}
{%- endfor %}
{%- endfor %}

set reports_tcl_path [file normalize {{reports_tcl}}]

add_files -fileset utils_1 -norecurse {{reports_tcl}}

set_property STEPS.OPT_DESIGN.TCL.POST $reports_tcl_path [get_runs impl_1]
set_property STEPS.PLACE_DESIGN.TCL.POST $reports_tcl_path [get_runs impl_1]
set_property STEPS.ROUTE_DESIGN.TCL.POST $reports_tcl_path [get_runs impl_1]

puts "\n=============================( Running Synthesis )============================="
reset_run synth_1
launch_runs synth_1 {% if settings.nthreads %} -jobs {{settings.nthreads}} {%- endif %}
wait_on_run synth_1 {# <-- renamed to wait_on_runs in Vivado 2021.2 #}
puts "\n===========================( Running Implementation )=========================="
reset_run impl_1
launch_runs impl_1 {%-if settings.nthreads %} -jobs {{settings.nthreads}} {%- endif %} {% if not settings.write_bitstream %} -to_step route_design {%- endif %}
wait_on_run impl_1
puts "\n====================================( DONE )==================================="
