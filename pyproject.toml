[project]
name = "xeda"
description = "Cross EDA Abstraction and Automation"
readme = "README.md"
requires-python = ">=3.10"
dynamic = ["version"]
license = { file = "LICENSE.txt" }
keywords = [
    "EDA",
    "Electronic",
    "Design",
    "Automation",
    "Tool",
    "Synthesis",
    "Simulation",
    "Simulator",
    "Verification",
    "Hardware",
    "Verilog",
    "VHDL",
    "FPGA",
    "ASIC",
]
authors = [ #
    { name = "Kamyar Mohajerani", email = "kammoh@gmail.com" },
]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Utilities",
]
dependencies = [
    "jinja2              ~= 3.1",
    "pydantic            >= 1.10.22, < 2.0",
    "tomli               ~= 2.0; python_version<'3.11'",
    "python-box[]        ~= 7.2",
    "attrs               ~= 25.3.0",
    "cattrs              ~= 25.2.0",
    "attrs_strict        ~= 1.0.1",
    "pathvalidate        ~= 3.3.1",
    "click               ~= 8.2.1",
    "click_help_colors   ~= 0.9",
    "coloredlogs         ~= 15.0",
    "rich                >= 14.1.0",
    "pebble              ~= 5.1.3",
    "pint                ~= 0.24",
    "importlib_resources >= 6.0",                        # backport of importlib.resources, replaces pkg_resources
    "simpleeval          ~= 1.0",
    "PyYAML              ~= 6.0",
    # experimental:
    "varname           ~= 0.15.0",
    "overrides         ~= 7.7",
    "simple_term_menu  ~= 1.6",
    "psutil            ~= 7.1.0",
    "pyvcd             ~= 0.4",
    "GitPython         ~= 3.1",
    "fabric            ~= 3.2",
    "execnet           ~= 2.1",
    "devtools          ~= 0.12",
    "colorama          ~= 0.4",
]

[project.optional-dependencies]

[project.urls]
homepage = "https://github.com/XedaHQ/xeda"
repository = "https://github.com/XedaHQ/xeda.git"
changelog = "https://github.com/XedaHQ/xeda/blob/dev/CHANGELOG.md"
# documentation = "..."

[project.scripts]
xeda = "xeda.cli:cli"

[dependency-groups]
dev = ["pytest", "mypy", "black", "isort", "pylint", "tox", "ruff>=0.11.13"]

[build-system]
requires = ["setuptools>=65", "wheel>=0.37", "setuptools_scm[toml]>=7.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["xeda*"]
exclude = [
    "tests/**",
    "*/tests/**",
    "platforms",
    "*/platforms",
    "**/platforms/**",
]
namespaces = false

[tool.setuptools.package-data]
"xeda" = [
    "*.cpp",
    "*.dse",
    "*.fdc",
    "*.j2",
    "*.json",
    "*.ldc",
    "*.lef",
    "*.lib",
    "*.sdc",
    "*.sdf",
    "*.tcl",
    "*.toml",
    "*.ucf",
    "*.xcf",
    "*.xdc",
    "*.ys",
    # "*/platforms/**",
]

[tool.setuptools.exclude-package-data]
"xeda" = [
    "tests/*",
    # moving the platforms to the xeda_platforms* packages
    "**/platforms/",
]

[tool.setuptools_scm]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "line-too-long",
    "invalid-name",
    "too-few-public-methods",
    "unspecified-encoding",
    "missing-function-docstring",
    "too-many-instance-attributes",
    "too-many-statements",
    "too-many-branches",
    "too-many-locals",
    "too-many-arguments",
    "too-many-nested-blocks",
    # to be removed:
    "missing-module-docstring",
    "unused-argument",
    "fixme",
    "f-string-without-interpolation",
    "wrong-import-order",
    "missing-class-docstring",
    "no-self-argument",               # from pydantic validators (classmethod)
    # "no-self-use",                    # from pydantic validators (classmethod)
]

[tool.pylint.similarities]
min-similarity-lines = 10
# Ignore comments when computing similarities.
ignore-comments = "yes"
# Ignore docstrings when computing similarities.
ignore-docstrings = "yes"
# Ignore imports when computing similarities.
ignore-imports = "no"

[tool.pylint.design]
max-returns = 8

[tool.bandit]
skips = [
    "B701",
    "B101:assert_used",
    "B404:blacklist",   # subprocess module
    "B314",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
# warn_unused_ignores = false
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
# for strict mypy:
# disallow_untyped_defs = true
# strict = false
# ignore_missing_imports = true
warn_unused_configs = true
# exclude = ['^build/.*$', '^examples/.*$', '^\.tox/.*$', 'src/flows/openroad/openroad_scripts/utils/.*']
color_output = true
pretty = true
strict_optional = true
# warn_return_any = false
disable_error_code = ["import-untyped", "type-arg", "unused-ignore"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
