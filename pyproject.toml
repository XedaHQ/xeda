[project]
name = "xeda"
description = "Cross EDA Abstraction and Automation"
readme = "README.md"
requires-python = ">=3.8"
dynamic = ["version"]
license = { file = "LICENSE.txt" }
keywords = [
    "EDA",
    "Electronic",
    "Design",
    "Automation",
    "Tool",
    "Synthesis",
    "Simulation",
    "Simulator",
    "Verification",
    "Hardware",
    "Verilog",
    "VHDL",
    "FPGA",
    "ASIC",
]
authors = [ #
    { name = "Kamyar Mohajerani" },
    { email = "kammoh@gmail.com" },
]
classifiers = [
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Topic :: Utilities",
]
dependencies = [
    "jinja2              ~= 3.1",
    "pydantic            ~= 1.10",
    "tomli               ~= 2.0; python_version<'3.11'",
    "python-box[]        ~= 7.0",
    "attrs               >= 22.1,< 24.0",
    "cattrs              ~= 22.2",
    "attrs_strict        ~= 1.0",
    "pathvalidate        >= 2.5,< 4.0",
    "click               ~= 8.1",
    "click_help_colors   ~= 0.9",
    "coloredlogs         ~= 15.0",
    "rich                >= 12.6,< 14.0",
    "pebble              ~= 5.0",
    "pint                ~= 0.20",
    "importlib_resources >= 5.10",                       # backport of importlib.resources, replaces pkg_resources
    "simpleeval          >= 0.9.13",
    # experimental:
    "pyyaml            ~= 6.0",
    "varname           >= 0.10",
    "overrides         >= 6.1",
    "simple_term_menu  >= 1.5.2",
    "psutil            >= 5.9",
    "junitparser       >= 2.4,< 4.0", # TODO: remove
    "pyvcd             ~= 0.3",
    "GitPython         >= 3.1.30",
    "fabric            ~= 3.0",
    "execnet           >= 1.9",
]

[project.optional-dependencies]
# docs = [
#     "sphinx",
#     "sphinx-tabs",
#     "sphinx-jinja",
#     "sphinxcontrib.bibtex",
#     "sphinx_panels",
#     "sphinxext.rediraffe",
#     "sphinxcontrib.mermaid",
#     "sphinxext.opengraph",
#     "autodoc_pydantic",
#     "sphinx_book_theme",
#     "myst-parser",
# ]
dev = ["pytest", "mypy", "black", "flakeheaven", "tox"]
tests = ["pytest", "mypy"]

[project.urls]
homepage = "https://github.com/XedaHQ/xeda"
repository = "https://github.com/XedaHQ/xeda.git"
changelog = "https://github.com/XedaHQ/xeda/blob/dev/CHANGELOG.md"
# documentation = "..."

[project.scripts]
xeda = "xeda.cli:cli"

[build-system]
requires = ["setuptools>=65", "wheel>=0.37", "setuptools_scm[toml]>=7.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["xeda*"]
exclude = [
    "tests/**",
    "*/tests/**",
]
namespaces = false

[tool.setuptools.package-data]
"xeda" = [
    "*.cpp",
    "*.dse",
    "*.fdc",
    "*.j2",
    "*.json",
    "*.ldc",
    "*.lef",
    "*.lib",
    "*.sdc",
    "*.sdf",
    "*.tcl",
    "*.toml",
    "*.ucf",
    "*.xcf",
    "*.xdc",
    "*.ys",
    "*/platforms/**",
    "resources/**",
]

[tool.setuptools.exclude-package-data]
"xeda" = [
    "tests*",
    # # must keep PyPI dist archive size < 100MB
    # # TODO: move platforms to separate xeda_platforms_xx packages
    # "*platforms/gf180*",
    # "platforms/asap7/lib/*_LVT_*",
    # "platforms/asap7/lib/*_SLVT_*",
    # "platforms/asap7/lib/*_SRAM_*",
]

[tool.setuptools_scm]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "line-too-long",
    "invalid-name",
    "too-few-public-methods",
    "unspecified-encoding",
    "missing-function-docstring",
    "too-many-instance-attributes",
    "too-many-statements",
    "too-many-branches",
    "too-many-locals",
    "too-many-arguments",
    "too-many-nested-blocks",
    # to be removed:
    "missing-module-docstring",
    "unused-argument",
    "fixme",
    "f-string-without-interpolation",
    "wrong-import-order",
    "missing-class-docstring",
    "no-self-argument",               # from pydantic validators (classmethod)
    "no-self-use",                    # from pydantic validators (classmethod)
]
[tool.pylint.similarities]
min-similarity-lines = 10

# Ignore comments when computing similarities.
ignore-comments = "yes"

# Ignore docstrings when computing similarities.
ignore-docstrings = "yes"

# Ignore imports when computing similarities.
ignore-imports = "no"

[tool.pylint.design]
max-returns = 8

[tool.bandit]
skips = [
    "B701",
    "B101:assert_used",
    "B404:blacklist",   # subprocess module
    "B314",
]

[tool.flakeheaven]
# make output nice
format = "grouped"
# 80 chars aren't enough in 21 century
max_line_length = 100
# show line of source code in output
show_source = true

[tool.flakeheaven.plugins]
# include everything in pyflakes except F401
# pyflakes = ["+*", "-F401"]
pyflakes = ["+*"]
pycodestyle = [
    "+*",
    "-E501", # line too long
    "-E203",
    "-E231", # whitespace before/after ':'
    "-C812", # missing trailing comma
    "-W503", # line break before binary operator
]
# enable only codes from S100 to S199
# flake8-bandit = ["-*", "+S1??"]
flake8-bandit = [
    "+*",
    "-S603",
    "-S404", # subprocess
    "-S405",
    "-S314", # xml.etree.ElementTree.parse
    "-S101", # asserts
    "-S311", # random crypto
    "-S701", # jinja2 autoescape
    "-S310", # urllib open URL
]
# enable everything that starts from `flake8-`
"flake8-*" = ["+*"]
# explicitly disable plugin
flake8-docstrings = ["-*"]
flake8-quotes = ["-*"]
flake8-commas = ["-*"]

[tool.isort]
profile = "black"

[tool.zimports]
black-line-length = 100
keep-unused-type-checking = true
# multi-imports = true
